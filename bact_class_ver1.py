# -*- coding: utf-8 -*-
"""bact_class_ver1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12EwBSMX83BC8pjluej2dW8gNCl8xW_Dn
"""

from keras.models import Sequential
from keras import layers

from keras.preprocessing.image import ImageDataGenerator

model = models.Sequential()

train_datagen = ImageDataGenerator(
                rescale = 1. / 255)

from keras import backend as K

img_width, img_height = 150, 150

train_data_dir = 'bacteria_data/train'

train_data_dir

validation_data_dir = 'bacteria_data/validation/'

nb_train_samples = 16

nb_validation_samples = 4

epochs = 2

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

train_datagen = ImageDataGenerator(
                rescale = 1. / 255)

"""batch_size = 16"""

import numpy

import matplotlib

import os

test_datagen = ImageDataGenerator(rescale = 1. / 255)

train_generator = train_datagen.flow_from_directory(train_data_dir,
                                                   target_size = (img_width, img_height),
                                                   class_mode = 'categorical',
                                                   batch_size = 32)

validation_generator = test_datagen.flow_from_directory(validation_data_dir,
                                                       target_size=(img_width, img_height),
                                                       class_mode = 'categorical',
                                                       batch_size = 32)







for data_batch, labels_batch in train_generator:
    print('data batch shape:', data_batch.shape)
    print('labels batch shape:', labels_batch.shape)
    break

model.add(layers.Conv2D(16, (3,3), activation='relu',input_shape=(150,150,3)))

"""model.add(layers.MaxPooling2D((2,2))"""

model.add(layers.MaxPooling2D((2,2)))

model.add(layers.Conv2D(64,(3,3), activation='relu'))

model.add(layers.MaxPooling2D((2,2)))

model.add(layers.Conv2D(64,(3,3), activation='relu'))

model.summary()

model.add(layers.Flatten())

model.add(layers.Dense((64), activation='relu'))

model.add(layers.Dense((7), activation='sigmoid'))

model.summary()

"""model.compile(optimizer='rmsprop',
                loss='categorical_crossentropy',
                metrics=['accuracy'])
"""

model.compile(optimizer='rmsprop',
                loss='categorical_crossentropy',
                metrics=['accuracy'])

hist = model.fit_generator(train_generator,
                   steps_per_epoch = 100,
                   epochs=epochs,
                   validation_data = validation_generator,
                   validation_steps=50)

model.save('bact_class_ver1.h5')

import matplotlib.pyplot as plt

acc = hist.history['acc']

val_acc = hist.history['val_acc']



loss = hist.history['loss']

val_loss = hist.history['val_loss']

epochs = range(1, len(acc)  +1)

plt.plot(epochs, acc, 'b--', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and Validation accuracy')
plt.legend()

plt.figure()
plt.show()

plt.plot(epochs, loss, 'r--', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and Validation loss')
plt.legend()

plt.show()

